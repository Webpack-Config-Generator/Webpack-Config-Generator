const fs = require('fs');
const path = require('path');

const {
  buildExports,
  buildScript,
  listPackageImports
} = require('./functions');

function generateConfiguration(req, res, next) {
  if (req.body && req.body.answers) {
    const { answers } = req.body;

    // Build the object
    const configuration = {};
    configuration.moduleExports = buildExports(answers);
    configuration.installScript = buildScript(answers);
    configuration.listPackageImports = listPackageImports(answers);

    // Check for errors
    if (
      !configuration.moduleExports ||
      !configuration.installScript ||
      !configuration.listPackageImports
    ) {
      return res.status(418).send('Failed to build the configuration object.');
    }

    // Pass on the result
    res.locals.configuration = configuration;

    next();
  } else {
    // If we received an improper body, return an error
    return res.status(418).end('No data received');
  }
}

function generateFile(req, res, next) {
  /* TODO: Replace with the data that will be coming from the database */
  // const { configuration } = res.locals.configuration
  // const { id } = res.locals.id
  const configuration = {};
  configuration.moduleExports = {
    entry: './src/index.js',
    output: {
      path: 'dist/',
      filename: 'bundle.js'
    }
  };
  configuration.installScript = 'npm install --save webpack';
  configuration.listPackageImports = ['const path = require("path");'];
  const id = Math.floor(Math.random() * 10000000);

  const filename = 'webpack.config.js';
  const filepath = path.resolve(`./server/configurator/__temp__/${filename}`);

  const startWithComment =
    '// Auto-generated by the Webpack Config Generator \n// http://localhost:3000 \n\n';

  fs.writeFile(filepath, startWithComment, 'utf8', err => {
    if (err) {
      console.log({ err });
      res.status(418).end();
    } else {
      const stream = fs.createWriteStream(filepath, { flags: 'a' });
      configuration.listPackageImports.forEach(importText => {
        stream.write(importText + '\n');
      });

      stream.write(generateModuleText(configuration.moduleExports));
      stream.end();
      stream.on('close', () => {
        res.setHeader(
          'Content-disposition',
          `attachment; filename="${filename}"`
        );
        res.download(filepath, filename, err => {
          if (err) {
            res.status(418).end(err);
          } else {
            res.status(200).end();
          }
        });
      });
    }
  });
}

function generateModuleText({ entry, output }) {
  return `
module.exports = {
  mode: 'development',
  entry: '${entry}',
  output: {
    path: path.resolve(__dirname, '${output.path}'),
    publicPath: '${output.path}', 
    filename: '${output.filename}'
  },
  resolve: { extensions: ['*', '.js']}
};

`;
}

module.exports = {
  generateConfiguration,
  generateFile
};
